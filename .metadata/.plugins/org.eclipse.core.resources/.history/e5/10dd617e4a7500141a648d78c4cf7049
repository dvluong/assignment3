package edu.csupomona.cs.cs356.assignment_2;
/**
 * CS 356: Objected Oriented Programming 
 * Professor: Yu Sun
 *
 * Project 2
 *
 * <The user class stores a list of users and tweets. Implements Observer pattern.>
 *
 * David V Luong
 */
import java.util.ArrayList;
import java.util.List;
import java.util.Observable;
import java.util.Observer;

import javax.swing.DefaultListModel;
import javax.swing.JFrame;
import javax.swing.JList;

public class User extends Observable implements Component, Observer {

	String user;
	List<User> followers = new ArrayList<User>();
	List<User> following = new ArrayList<User>();
	List<String> tweet = new ArrayList<String>();
//	DefaultListModel<String> newsFeed = new DefaultListModel<String>();
//	JList<String> listTweets = new JList<String>(newsFeed);
	


	public User(String newUser) {
		user = newUser;		
	}

	public String getUser() {
		return user;
	}

	public String toString() {
		return user;
	}

	public void addFollower(User user) {
		followers.add(user);
	}

	public void followUser(User userId) {
		User userToFollow = userId;
		this.following.add(userToFollow);
		setChanged();
		addObserver(userToFollow);
		notifyObservers();
		clearChanged();
		followers.add(userToFollow);
	}

	public void sendTweet(String tweets) {
		tweet.add(tweets);
		setChanged();
		notifyObservers(tweets);
		clearChanged();
	}

	public void update(User user, DefaultListModel<String> newsFeed, JList<String> listTweets) {
		newsFeed.addElement(user.getUser() + " tweeted: " + user.tweet.get(0));		
		listTweets.setModel(newsFeed);
	}

	public void accept(Visitor visitor) {
		visitor.visitUser();
	}
	
	public void notifySubscriber(){
		
	}
	
	public void update(Observable arg0, Object arg1) {
		if (arg1 instanceof String && arg0 instanceof User) {
			String resp = (String) arg1;
			System.out.println((User) arg0 + " tweeted: " + resp);			
		} else if (arg0 instanceof User && arg1 instanceof User) {
			System.out.println((User) arg0 + " followed " + arg1);
		}
	}
}